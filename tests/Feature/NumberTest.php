<?php

namespace Tests\Feature;

use App\Models\Customer;
use App\Models\Number;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class NumberTest extends TestCase
{
    /**
     * @var string
     */
    private $route;
    private $number;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->route  = \route('api.numbers.store');
        $this->number = Number::factory()->defaultStatus()->make();
    }


    public function test_admin_user_cant_create_with_missing_information()
    {
        $payload = [];

        $this
            ->actingAs($this->admin_user)
            ->json('post', $this->route, $payload)
            ->assertJsonStructure(['message', 'errors' => ['number']])
            ->assertStatus(422);

        $this->assertDatabaseHas('numbers', $payload);
    }


    public function test_created_number_has_default_information()
    {
        $payload = $this->number->toArray();

        $response = $this
            ->actingAs($this->admin_user)
            ->json('post', $this->route, $payload)
            ->assertJsonFragment(['description' => Number::NEW_STATUS])
            ->assertJsonPath('data.status.description', Number::NEW_STATUS);

        $response->assertStatus(201);

        $response = \json_decode($response->getContent());
        $this->assertCount(2, $response->data->number_preferences);
        $this->assertDatabaseHas('numbers', $payload);
    }

    public function test_admin_user_can_create_number()
    {
        $payload = $this->number->toArray();

        $this
            ->actingAs($this->admin_user)
            ->json('post', $this->route, $payload)
            ->assertJsonFragment(['description' => Number::NEW_STATUS])
            ->assertJsonPath('data.status.description', Number::NEW_STATUS)
            ->assertJsonStructure(['data'])
            ->assertStatus(201);

        $this->assertDatabaseHas('numbers', $payload);
    }
}
